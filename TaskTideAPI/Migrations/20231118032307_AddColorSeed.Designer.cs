// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TaskTideAPI.DataContexts;

#nullable disable

namespace TaskTideAPI.Migrations
{
    [DbContext(typeof(TaskTideContext))]
    [Migration("20231118032307_AddColorSeed")]
    partial class AddColorSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CalendarUser", b =>
                {
                    b.Property<int>("SharedCalendarsId")
                        .HasColumnType("integer");

                    b.Property<int>("SharedWithId")
                        .HasColumnType("integer");

                    b.HasKey("SharedCalendarsId", "SharedWithId");

                    b.HasIndex("SharedWithId");

                    b.ToTable("CalendarUser");
                });

            modelBuilder.Entity("TaskTideAPI.Models.Calendar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ColorId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Calendars");
                });

            modelBuilder.Entity("TaskTideAPI.Models.CalendarInvitation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Accepted")
                        .HasColumnType("boolean");

                    b.Property<int>("CalendarId")
                        .HasColumnType("integer");

                    b.Property<ZonedDateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int>("InviteeId")
                        .HasColumnType("integer");

                    b.Property<int>("InviterId")
                        .HasColumnType("integer");

                    b.Property<ZonedDateTime?>("RespondedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CalendarId");

                    b.HasIndex("InviteeId");

                    b.HasIndex("InviterId");

                    b.ToTable("CalendarInvitations");
                });

            modelBuilder.Entity("TaskTideAPI.Models.LunarCalendarRecurrence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Ordinal")
                        .HasColumnType("integer");

                    b.Property<int>("ParentId")
                        .HasColumnType("integer");

                    b.Property<LocalDate>("TargetDate")
                        .HasColumnType("date");

                    b.Property<int>("TargetMoonPhase")
                        .HasColumnType("integer");

                    b.Property<int>("TargetWeekdays")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("LunarCalendarRecurrences");
                });

            modelBuilder.Entity("TaskTideAPI.Models.Recurrence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Count")
                        .HasColumnType("integer");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Duration?>("Duration")
                        .HasColumnType("interval");

                    b.Property<int>("EndType")
                        .HasColumnType("integer");

                    b.Property<int?>("Interval")
                        .HasColumnType("integer");

                    b.Property<int>("Months")
                        .HasColumnType("integer");

                    b.Property<int>("Ordinal")
                        .HasColumnType("integer");

                    b.Property<LocalDate>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("TaskEventId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int>("Weekdays")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TaskEventId");

                    b.ToTable("Recurrences");
                });

            modelBuilder.Entity("TaskTideAPI.Models.TaskEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<ZonedDateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ParentId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("TaskEvents");
                });

            modelBuilder.Entity("TaskTideAPI.Models.TaskEventColor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<byte>("Blue")
                        .HasColumnType("smallint");

                    b.Property<byte>("Green")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte>("Red")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("TaskEventColors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Blue = (byte)203,
                            Green = (byte)128,
                            Name = "Default",
                            Red = (byte)92
                        },
                        new
                        {
                            Id = 2,
                            Blue = (byte)79,
                            Green = (byte)150,
                            Name = "Orange",
                            Red = (byte)255
                        },
                        new
                        {
                            Id = 3,
                            Blue = (byte)97,
                            Green = (byte)105,
                            Name = "Red",
                            Red = (byte)255
                        },
                        new
                        {
                            Id = 4,
                            Blue = (byte)204,
                            Green = (byte)122,
                            Name = "Lavender",
                            Red = (byte)174
                        });
                });

            modelBuilder.Entity("TaskTideAPI.Models.TaskEventInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllDay")
                        .HasColumnType("boolean");

                    b.Property<ZonedDateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Duration?>("Duration")
                        .HasColumnType("interval");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ParentId")
                        .HasColumnType("integer");

                    b.Property<LocalDate>("StartDate")
                        .HasColumnType("date");

                    b.Property<LocalTime?>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("TaskEventsInstance");
                });

            modelBuilder.Entity("TaskTideAPI.Models.TransactionnalEvents", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ModelId")
                        .HasColumnType("integer");

                    b.Property<ZonedDateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TransactionnalEvents");
                });

            modelBuilder.Entity("TaskTideAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CalendarUser", b =>
                {
                    b.HasOne("TaskTideAPI.Models.Calendar", null)
                        .WithMany()
                        .HasForeignKey("SharedCalendarsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskTideAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("SharedWithId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskTideAPI.Models.Calendar", b =>
                {
                    b.HasOne("TaskTideAPI.Models.TaskEventColor", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId");

                    b.HasOne("TaskTideAPI.Models.User", "Owner")
                        .WithMany("Calendars")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("TaskTideAPI.Models.CalendarInvitation", b =>
                {
                    b.HasOne("TaskTideAPI.Models.Calendar", "Calendar")
                        .WithMany("Invitations")
                        .HasForeignKey("CalendarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskTideAPI.Models.User", "Invitee")
                        .WithMany("InvitationsReceived")
                        .HasForeignKey("InviteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskTideAPI.Models.User", "Inviter")
                        .WithMany("InvitationsSent")
                        .HasForeignKey("InviterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Calendar");

                    b.Navigation("Invitee");

                    b.Navigation("Inviter");
                });

            modelBuilder.Entity("TaskTideAPI.Models.LunarCalendarRecurrence", b =>
                {
                    b.HasOne("TaskTideAPI.Models.TaskEvent", "Parent")
                        .WithMany("LunarCalendarRecurrences")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("TaskTideAPI.Models.Recurrence", b =>
                {
                    b.HasOne("TaskTideAPI.Models.TaskEvent", "TaskEvent")
                        .WithMany("Recurrences")
                        .HasForeignKey("TaskEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskEvent");
                });

            modelBuilder.Entity("TaskTideAPI.Models.TaskEvent", b =>
                {
                    b.HasOne("TaskTideAPI.Models.Calendar", "Parent")
                        .WithMany("TasksAndEvents")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("TaskTideAPI.Models.TaskEventInstance", b =>
                {
                    b.HasOne("TaskTideAPI.Models.TaskEvent", "Parent")
                        .WithMany("Instances")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("TaskTideAPI.Models.TransactionnalEvents", b =>
                {
                    b.HasOne("TaskTideAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskTideAPI.Models.Calendar", b =>
                {
                    b.Navigation("Invitations");

                    b.Navigation("TasksAndEvents");
                });

            modelBuilder.Entity("TaskTideAPI.Models.TaskEvent", b =>
                {
                    b.Navigation("Instances");

                    b.Navigation("LunarCalendarRecurrences");

                    b.Navigation("Recurrences");
                });

            modelBuilder.Entity("TaskTideAPI.Models.User", b =>
                {
                    b.Navigation("Calendars");

                    b.Navigation("InvitationsReceived");

                    b.Navigation("InvitationsSent");
                });
#pragma warning restore 612, 618
        }
    }
}
